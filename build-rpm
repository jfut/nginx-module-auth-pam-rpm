#!/bin/bash
#
# Build RPM
#
# @author Jun Futagawa

set -e
set -u

export LC_ALL=C

BUILD_PACKAGES="autoconf automake libtool gcc make rpm-build rpmdevtools"
MAX_RETRY="10"

if [[ $# -lt 2 ]]; then
    echo $0 RPMBUILD_DIR SPEC_FILE_NAME [REPOSITORY] [MODULE_VERSION]
    exit 1
fi

RPMBUILD_DIR="${1}"
SPEC_FILE_NAME="${2}"
REPOSITORY="${3:-}"
MODULE_VERSION="${4:-}"

pushd "${RPMBUILD_DIR}"

# RPM macros
RPM_MACROS=/usr/lib/rpm/macros.d/macros.dist
if [[ -f /etc/rpm/macros.dist ]]; then
    # el7 and el8
    RPM_MACROS=/etc/rpm/macros.dist
fi
RPM_DIST=.$(egrep -o "^%el[0-9]*" "${RPM_MACROS}" | tr -d '%')
echo "RPM_DIST: ${RPM_DIST} (${RPM_MACROS})"

# install nginx and setup spec file
echo
echo "Installing nginx"
PACKAGE_MANAGER="dnf"
if [[ "${RPM_DIST}" = ".el9" ]]; then
    # el9 or later
    dnf -y install nginx
elif [[ "${RPM_DIST}" = ".el8" ]]; then
    # el8

    # check module version
    if [[ -z "${MODULE_VERSION}" ]]; then
        echo "Error: MODULE_VERSION is required for el8 or later"
        exit 1
    fi

    # install epel-release
    if [[ "${REPOSITORY}" = "epel-modular" ]]; then
        dnf -y install epel-release
        dnf clean all
    fi

    # install nginx
    echo
    dnf -y module reset nginx
    echo "Installing nginx:${MODULE_VERSION} on ${REPOSITORY}"
    dnf -y module install nginx:${MODULE_VERSION}/common
else
    PACKAGE_MANAGER="yum"
    yum -y install epel-release
    yum -y install nginx
fi
# 1:1.20.0-2.module_el8.5.0+899+43b718f6 -> 1.20.0
NGINX_VERSION=$(${PACKAGE_MANAGER} list -q nginx | grep nginx.x86_64 | awk '{ print $2 }' | grep -oP '(?<=:).+(?=-)')
sed -e "s/@NGINX_VERSION@/${NGINX_VERSION}/g" "SPECS/${SPEC_FILE_NAME}.in" > "SPECS/${SPEC_FILE_NAME}"

# install dependencies
if [[ -f /usr/bin/dnf ]]; then
    # el8 or later
    echo
    echo "Installing build tools and dependencies: ${BUILD_PACKAGES} dnf-plugins-core"
    RETRY=0
    until dnf -y install ${BUILD_PACKAGES} dnf-plugins-core || [[ "${RETRY}" -eq "${MAX_RETRY}" ]];
    do
        echo
        sleep $((RETRY++))
        echo "Retry: dnf -y install ${BUILD_PACKAGES} (retry: ${RETRY})"
    done
    until dnf -y builddep "SPECS/${SPEC_FILE_NAME}" || [[ "${RETRY}" -eq "${MAX_RETRY}" ]];
    do
        sleep $((RETRY++))
        echo
        echo "Retry: dnf -y builddep \"SPECS/${SPEC_FILE_NAME}\" (retry: ${RETRY})"
    done
else
    echo
    echo "Installing build tools and dependencies: ${BUILD_PACKAGES}"
    until yum -y install ${BUILD_PACKAGES} || [[ "${RETRY}" -eq "${MAX_RETRY}" ]];
    do
        sleep $((RETRY++))
        echo
        echo "Retry: yum -y install ${BUILD_PACKAGES} (retry: ${RETRY})"
    done
    until yum-builddep -y "SPECS/${SPEC_FILE_NAME}" || [[ "${RETRY}" -eq "${MAX_RETRY}" ]];
    do
        sleep $((RETRY++))
        echo
        echo "Retry: yum-builddep -y \"SPECS/${SPEC_FILE_NAME}\" (retry: ${RETRY})"
    done
fi

# build rpm
if [[ ! -d SOURCES ]]; then
    mkdir SOURCES
fi

if [[ "${RPM_DIST}" = ".el9" ]]; then
    # el9 or later
    spectool -g -a "SPECS/${SPEC_FILE_NAME}" -C SOURCES/
else
    # el7 or el8
    spectool -g -A "SPECS/${SPEC_FILE_NAME}" -C SOURCES/
fi

echo "Building RPM:"
if [[ "${REPOSITORY}" = "epel-modular" ]]; then
    RPM_DIST=$(echo "${RPM_DIST}" | sed -r "s/^\.(.*)/.module_\1.epel.${MODULE_VERSION}/")
else
    RPM_DIST=$(echo "${RPM_DIST}" | sed -r "s/^\.(.*)/.module_\1.${MODULE_VERSION}/")
fi
rpmbuild \
    --define "%_topdir ${RPMBUILD_DIR}" \
    --define "%dist ${RPM_DIST}" \
    -ba "SPECS/${SPEC_FILE_NAME}"

popd

